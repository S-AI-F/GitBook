[
["index.html", "My Git Turorial Chapter 1 Prerequisites", " My Git Turorial Saif Shabou 2020-04-07 Chapter 1 Prerequisites This is a Git tutorial written in Markdown and compiled by bookdown package. It is based in different documentation that you can find in these websites: https://git-scm.com/book/en/v2 https://help.github.com/en/github "],
["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2020) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["git-basics.html", "Chapter 3 Git Basics 3.1 Getting a Git repositery 3.2 Recording Changes to the repositery 3.3 Viewing the commit history", " Chapter 3 Git Basics 3.1 Getting a Git repositery There are two ways for obtaining a Git repository: - Transform an existing local directory without version control into a Git repositor - Clone an existing Git repositery from somewhere else 3.1.1 Initializig a Repository in an Existing Directory First, you have to go to the project directory # work directory initial_repo = &quot;D:/git_test/Git_Book/&quot; setwd(initial_repo) # Repository directory name dir_name = &quot;MyRepo&quot; new_repo = paste(initial_repo,&quot;MyRepo&quot;, sep = &quot;/&quot;) # verify if the repo file exist and remove it if it exists if(dir.exists(&quot;D:/git_test/Git_Book/MyRepo&quot;) == TRUE){ unlink(&quot;D:/git_test/Git_Book/MyRepo&quot;, recursive = TRUE) } # we create a project directory dir.create(&quot;MyRepo&quot;) ## Warning in dir.create(&quot;MyRepo&quot;): &#39;MyRepo&#39; existe déjà # Then we go to that projetc directory setwd(new_repo) shell(&quot;dir&quot;) # initialize a git repository shell(&quot;git init&quot;) This creates a new subdirectory named .git that contains all necessary repository files (a git repository skeleton). Now we can start version-conrolling files and do initial commits. setwd(new_repo) # First we have to specify our identity shell(&#39;git config --global user.name &quot;Saif Shabou&quot;&#39;) shell(&#39;git config --global user.email &quot;saif.shabou@gmail.com&quot;&#39;) print(getwd()) ## [1] &quot;D:/git_test/Git_Book/MyRepo&quot; # then we create a new file and commit this action nb = sample(1:1000, 1, replace=TRUE) filename = paste(&quot;file_&quot;,nb,&quot;.csv&quot;, sep = &quot;&quot;) file.create(filename) ## [1] TRUE cmd_add = paste(&quot;git add&quot;, filename, sep = &quot; &quot;) shell(cmd_add) shell(&#39;git commit -m &quot;adding new file&quot;&#39;, intern = TRUE) ## [1] &quot;[master (root-commit) 06b2c25] adding new file&quot; ## [2] &quot; 1 file changed, 0 insertions(+), 0 deletions(-)&quot; ## [3] &quot; create mode 100644 file_416.csv&quot; 3.1.2 Cloning an existing git project When we want to get a copy of an existing Git repositery we can use git clone shell(&quot;git clone https://github.com/S-AI-F/Remote-sensing-image-analysis MyClone&quot;) ## Warning in shell(&quot;git clone https://github.com/S-AI-F/Remote-sensing-image- ## analysis MyClone&quot;): &#39;git clone https://github.com/S-AI-F/Remote-sensing-image- ## analysis MyClone&#39; execution failed with error code 128 3.2 Recording Changes to the repositery Each file in our working directory can be in one of to possible states: tracked or untracked. Tracked files are the files known by Git. They can be: unmodified, modified, or staged. Untracked files are any files in the orking directory that are not in the staging area. When we clone a repository, all the files will be tracked and unmodified. When we are editing files, Git considers them as modified since they changed from the last commit. As we work, we stage these modified files and then we commit all those stages changes. And this cycle repeats. Git lifecycle (source:https://git-scm.com/book/en/v2) 3.2.1 Checking the Status of Files The command git status enables s to determine the status of the different tracked files. shell(&quot;git status&quot;, intern = TRUE) ## [1] &quot;On branch master&quot; ## [2] &quot;Changes not staged for commit:&quot; ## [3] &quot; (use \\&quot;git add &lt;file&gt;...\\&quot; to update what will be committed)&quot; ## [4] &quot; (use \\&quot;git restore &lt;file&gt;...\\&quot; to discard changes in working directory)&quot; ## [5] &quot; (commit or discard the untracked or modified content in submodules)&quot; ## [6] &quot;\\tmodified: .Rproj.user/CE830DEF/sources/prop/72E6F1F2&quot; ## [7] &quot;\\tmodified: 02-gitBasics.Rmd&quot; ## [8] &quot;\\tmodified: Git_Book.Rmd&quot; ## [9] &quot;\\tmodified: MyRepo (new commits)&quot; ## [10] &quot;\\tmodified: _book (modified content)&quot; ## [11] &quot;&quot; ## [12] &quot;no changes added to commit (use \\&quot;git add\\&quot; and/or \\&quot;git commit -a\\&quot;)&quot; We have to check the file status to know if we need to make a new commit. When the message tells:Your branch is up-to-date with 'origin/master'. nothing to commit, working directory clean, it means that none of our tracked files are modified. 3.2.2 Tracking new Files In order to track new file, we can use the command git add. To track all the existing files in the directory we use git add . In the git status results, we can see that Git recognizes the changes to be committed shell(&quot;git add .&quot;, intern = TRUE) ## character(0) We can use the command git diff to know what files we changed but not yet staged and what files we staged but not yet commited. shell(&quot;git diff&quot;, intern = TRUE) ## [1] &quot;diff --git a/_book b/_book&quot; ## [2] &quot;--- a/_book&quot; ## [3] &quot;+++ b/_book&quot; ## [4] &quot;@@ -1 +1 @@&quot; ## [5] &quot;-Subproject commit 161e6882b076857432ab97d290c8f556250001d8&quot; ## [6] &quot;+Subproject commit 161e6882b076857432ab97d290c8f556250001d8-dirty&quot; The command compares what is in our working directory with the staging area. The results show the changes we have made and have not yet staged. 3.2.3 Committing changes Committing changes include only files created and modified that are added using git add command. We have to check git status before committing in order to check that files to commit are already staged. shell(&#39;git commit -m &quot;my message of commit&quot;&#39;, intern = TRUE) ## [1] &quot;[master 5243148] my message of commit&quot; ## [2] &quot; 4 files changed, 69 insertions(+), 5 deletions(-)&quot; 3.3 Viewing the commit history When we have made several commits, we may need to look back what happened using the command git log. It lists the different commits made in the repository in reverse chronological order ann mention the commit id (SHA-1), the author (name, email), the commit date and the commit message. we can limit the number og log displayed by iusing -3 to show only the last 3 entries. shell(&quot;git log -3&quot;, intern = TRUE) ## [1] &quot;commit 524314893e1eb8546a3575c8c57d2885bc1c5cec&quot; ## [2] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [3] &quot;Date: Tue Apr 7 12:16:20 2020 +0200&quot; ## [4] &quot;&quot; ## [5] &quot; my message of commit&quot; ## [6] &quot;&quot; ## [7] &quot;commit 9b2e0b726a32fc730d25e0fce62f0427af8f819c&quot; ## [8] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [9] &quot;Date: Tue Apr 7 11:50:36 2020 +0200&quot; ## [10] &quot;&quot; ## [11] &quot; my message of commit&quot; ## [12] &quot;&quot; ## [13] &quot;commit 3064fa7174b73658caa6fc1445c9793684d335d0&quot; ## [14] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [15] &quot;Date: Tue Apr 7 11:24:13 2020 +0200&quot; ## [16] &quot;&quot; ## [17] &quot; Recording Changes to the repositery&#39;&quot; There are several options to the command git log. For example, -p shows the different (the path output) introduced in each commit. shell(&quot;git log -p -1&quot;, intern = TRUE) ## [1] &quot;commit 524314893e1eb8546a3575c8c57d2885bc1c5cec&quot; ## [2] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [3] &quot;Date: Tue Apr 7 12:16:20 2020 +0200&quot; ## [4] &quot;&quot; ## [5] &quot; my message of commit&quot; ## [6] &quot;&quot; ## [7] &quot;diff --git a/.Rproj.user/CE830DEF/sources/prop/72E6F1F2 b/.Rproj.user/CE830DEF/sources/prop/72E6F1F2&quot; ## [8] &quot;index a2314de..73c5ac1 100644&quot; ## [9] &quot;--- a/.Rproj.user/CE830DEF/sources/prop/72E6F1F2&quot; ## [10] &quot;+++ b/.Rproj.user/CE830DEF/sources/prop/72E6F1F2&quot; ## [11] &quot;@@ -1,4 +1,4 @@&quot; ## [12] &quot; {&quot; ## [13] &quot;- \\&quot;cursorPosition\\&quot; : \\&quot;119,67\\&quot;,&quot; ## [14] &quot;- \\&quot;scrollLine\\&quot; : \\&quot;106\\&quot;&quot; ## [15] &quot;+ \\&quot;cursorPosition\\&quot; : \\&quot;154,69\\&quot;,&quot; ## [16] &quot;+ \\&quot;scrollLine\\&quot; : \\&quot;135\\&quot;&quot; ## [17] &quot; }&quot; ## [18] &quot;\\\\ No newline at end of file&quot; ## [19] &quot;diff --git a/02-gitBasics.Rmd b/02-gitBasics.Rmd&quot; ## [20] &quot;index 68bc0da..0eea05d 100644&quot; ## [21] &quot;--- a/02-gitBasics.Rmd&quot; ## [22] &quot;+++ b/02-gitBasics.Rmd&quot; ## [23] &quot;@@ -120,6 +120,38 @@ shell(\\&quot;git log -3\\&quot;, intern = TRUE)&quot; ## [24] &quot; There are several options to the command `git log`. For example, `-p` shows the different (the path output) introduced in each commit.&quot; ## [25] &quot; &quot; ## [26] &quot; ```{r}&quot; ## [27] &quot;-shell(\\&quot;git log -p -3\\&quot;, intern = TRUE)&quot; ## [28] &quot;+shell(\\&quot;git log -p -1\\&quot;, intern = TRUE)&quot; ## [29] &quot;+```&quot; ## [30] &quot;+&quot; ## [31] &quot;+We can use the option `--stat` to show some statstics fr each commit: how many files were changed, hw many lines ere addred and removed... It prints a summary of the inormation at the end.&quot; ## [32] &quot;+&quot; ## [33] &quot;+```{r}&quot; ## [34] &quot;+shell(\\&quot;git log --stat -3\\&quot;, intern = TRUE)&quot; ## [35] &quot;+```&quot; ## [36] &quot;+&quot; ## [37] &quot;+The option `--pretty` changes the log output formats by specifying a customized format: `oneline`,`short`, `full`...&quot; ## [38] &quot;+&quot; ## [39] &quot;+```{r}&quot; ## [40] &quot;+shell(\\&quot;git log --pretty=oneline -3\\&quot;, intern = TRUE)&quot; ## [41] &quot;+```&quot; ## [42] &quot;+&quot; ## [43] &quot;+&quot; ## [44] &quot;+One interesting option in `format` consists on specifying our own log output. This espicially useful when our outputs are used and parsed. We can fin [here](https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History#pretty_format) the list of options we can use.&quot; ## [45] &quot;+&quot; ## [46] &quot;+```{r}&quot; ## [47] &quot;+shell(&#39;git log --pretty=format:\\&quot;%h - %an, %ar : %s\\&quot; -3&#39;, intern = TRUE)&quot; ## [48] &quot;+```&quot; ## [49] &quot;+&quot; ## [50] &quot;+The `graph` option allows us to add a nice ASCII graph showing the branch and merge history.&quot; ## [51] &quot;+&quot; ## [52] &quot;+```{r}&quot; ## [53] &quot;+shell(&#39;git log --pretty=format:\\&quot;%h %s\\&quot; --graph -3&#39;, intern = TRUE)&quot; ## [54] &quot;+```&quot; ## [55] &quot;+&quot; ## [56] &quot;+We can filter the log outputs based on different information:date (with commands `--since` and `--after`), author...&quot; ## [57] &quot;+&quot; ## [58] &quot;+&quot; ## [59] &quot;+```{r}&quot; ## [60] &quot;+shell(&#39;git log --pretty=oneline --since=\\&quot;2020-04-06\\&quot;&#39;, intern = TRUE)&quot; ## [61] &quot; ```&quot; ## [62] &quot; &quot; ## [63] &quot;diff --git a/Git_Book.Rmd b/Git_Book.Rmd&quot; ## [64] &quot;index bcc4e4f..338f68f 100644&quot; ## [65] &quot;--- a/Git_Book.Rmd&quot; ## [66] &quot;+++ b/Git_Book.Rmd&quot; ## [67] &quot;@@ -170,7 +170,39 @@ shell(\\&quot;git log -3\\&quot;, intern = TRUE)&quot; ## [68] &quot; There are several options to the command `git log`. For example, `-p` shows the different (the path output) introduced in each commit.&quot; ## [69] &quot; &quot; ## [70] &quot; ```{r}&quot; ## [71] &quot;-shell(\\&quot;git log -p -3\\&quot;, intern = TRUE)&quot; ## [72] &quot;+shell(\\&quot;git log -p -1\\&quot;, intern = TRUE)&quot; ## [73] &quot;+```&quot; ## [74] &quot;+&quot; ## [75] &quot;+We can use the option `--stat` to show some statstics fr each commit: how many files were changed, hw many lines ere addred and removed... It prints a summary of the inormation at the end.&quot; ## [76] &quot;+&quot; ## [77] &quot;+```{r}&quot; ## [78] &quot;+shell(\\&quot;git log --stat -3\\&quot;, intern = TRUE)&quot; ## [79] &quot;+```&quot; ## [80] &quot;+&quot; ## [81] &quot;+The option `--pretty` changes the log output formats by specifying a customized format: `oneline`,`short`, `full`...&quot; ## [82] &quot;+&quot; ## [83] &quot;+```{r}&quot; ## [84] &quot;+shell(\\&quot;git log --pretty=oneline -3\\&quot;, intern = TRUE)&quot; ## [85] &quot;+```&quot; ## [86] &quot;+&quot; ## [87] &quot;+&quot; ## [88] &quot;+One interesting option in `format` consists on specifying our own log output. This espicially useful when our outputs are used and parsed. We can fin [here](https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History#pretty_format) the list of options we can use.&quot; ## [89] &quot;+&quot; ## [90] &quot;+```{r}&quot; ## [91] &quot;+shell(&#39;git log --pretty=format:\\&quot;%h - %an, %ar : %s\\&quot; -3&#39;, intern = TRUE)&quot; ## [92] &quot;+```&quot; ## [93] &quot;+&quot; ## [94] &quot;+The `graph` option allows us to add a nice ASCII graph showing the branch and merge history.&quot; ## [95] &quot;+&quot; ## [96] &quot;+```{r}&quot; ## [97] &quot;+shell(&#39;git log --pretty=format:\\&quot;%h %s\\&quot; --graph -3&#39;, intern = TRUE)&quot; ## [98] &quot;+```&quot; ## [99] &quot;+&quot; ## [100] &quot;+We can filter the log outputs based on different information:date (with commands `--since` and `--after`), author...&quot; ## [101] &quot;+&quot; ## [102] &quot;+&quot; ## [103] &quot;+```{r}&quot; ## [104] &quot;+shell(&#39;git log --pretty=oneline --since=\\&quot;2020-04-06\\&quot;&#39;, intern = TRUE)&quot; ## [105] &quot; ```&quot; ## [106] &quot; &quot; ## [107] &quot; &quot; ## [108] &quot;diff --git a/MyRepo b/MyRepo&quot; ## [109] &quot;index 80bb906..06b2c25 160000&quot; ## [110] &quot;--- a/MyRepo&quot; ## [111] &quot;+++ b/MyRepo&quot; ## [112] &quot;@@ -1 +1 @@&quot; ## [113] &quot;-Subproject commit 80bb906cee6999dac030d5bd99ecbe38799e52ff&quot; ## [114] &quot;+Subproject commit 06b2c25b5118362dbc2b4b68c748e6cdbf990fd9&quot; We can use the option --stat to show some statstics fr each commit: how many files were changed, hw many lines ere addred and removed… It prints a summary of the inormation at the end. shell(&quot;git log --stat -3&quot;, intern = TRUE) ## [1] &quot;commit 524314893e1eb8546a3575c8c57d2885bc1c5cec&quot; ## [2] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [3] &quot;Date: Tue Apr 7 12:16:20 2020 +0200&quot; ## [4] &quot;&quot; ## [5] &quot; my message of commit&quot; ## [6] &quot;&quot; ## [7] &quot; .Rproj.user/CE830DEF/sources/prop/72E6F1F2 | 4 ++--&quot; ## [8] &quot; 02-gitBasics.Rmd | 34 +++++++++++++++++++++++++++++-&quot; ## [9] &quot; Git_Book.Rmd | 34 +++++++++++++++++++++++++++++-&quot; ## [10] &quot; MyRepo | 2 +-&quot; ## [11] &quot; 4 files changed, 69 insertions(+), 5 deletions(-)&quot; ## [12] &quot;&quot; ## [13] &quot;commit 9b2e0b726a32fc730d25e0fce62f0427af8f819c&quot; ## [14] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [15] &quot;Date: Tue Apr 7 11:50:36 2020 +0200&quot; ## [16] &quot;&quot; ## [17] &quot; my message of commit&quot; ## [18] &quot;&quot; ## [19] &quot; .Rproj.user/CE830DEF/sources/prop/72E6F1F2 | 4 +-&quot; ## [20] &quot; 02-gitBasics.Rmd | 12 +&quot; ## [21] &quot; Git_Book.Rmd | 294 +++++++++++++++++++++&quot; ## [22] &quot; .../figure-html/nice-fig-1.png | Bin&quot; ## [23] &quot; .../figure-latex/nice-fig-1.pdf | Bin&quot; ## [24] &quot; MyRepo | 2 +-&quot; ## [25] &quot; _book | 2 +-&quot; ## [26] &quot; 7 files changed, 310 insertions(+), 4 deletions(-)&quot; ## [27] &quot;&quot; ## [28] &quot;commit 3064fa7174b73658caa6fc1445c9793684d335d0&quot; ## [29] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [30] &quot;Date: Tue Apr 7 11:24:13 2020 +0200&quot; ## [31] &quot;&quot; ## [32] &quot; Recording Changes to the repositery&#39;&quot; ## [33] &quot;&quot; ## [34] &quot; .Rproj.user/CE830DEF/sources/prop/72E6F1F2 | 4 +-&quot; ## [35] &quot; 02-gitBasics.Rmd | 2 +-&quot; ## [36] &quot; Git_Book.Rmd | 282 ---------------------&quot; ## [37] &quot; .../Git_Book_files}/figure-html/nice-fig-1.png | Bin&quot; ## [38] &quot; .../Git_Book_files}/figure-latex/nice-fig-1.pdf | Bin&quot; ## [39] &quot; 5 files changed, 3 insertions(+), 285 deletions(-)&quot; The option --pretty changes the log output formats by specifying a customized format: oneline,short, full… shell(&quot;git log --pretty=oneline -3&quot;, intern = TRUE) ## [1] &quot;524314893e1eb8546a3575c8c57d2885bc1c5cec my message of commit&quot; ## [2] &quot;9b2e0b726a32fc730d25e0fce62f0427af8f819c my message of commit&quot; ## [3] &quot;3064fa7174b73658caa6fc1445c9793684d335d0 Recording Changes to the repositery&#39;&quot; One interesting option in format consists on specifying our own log output. This espicially useful when our outputs are used and parsed. We can fin here the list of options we can use. shell(&#39;git log --pretty=format:&quot;%h - %an, %ar : %s&quot; -3&#39;, intern = TRUE) ## [1] &quot;5243148 - Saif Shabou, 2 seconds ago : my message of commit&quot; ## [2] &quot;9b2e0b7 - Saif Shabou, 26 minutes ago : my message of commit&quot; ## [3] &quot;3064fa7 - Saif Shabou, 52 minutes ago : Recording Changes to the repositery&#39;&quot; The graph option allows us to add a nice ASCII graph showing the branch and merge history. shell(&#39;git log --pretty=format:&quot;%h %s&quot; --graph -3&#39;, intern = TRUE) ## [1] &quot;* 5243148 my message of commit&quot; ## [2] &quot;* 9b2e0b7 my message of commit&quot; ## [3] &quot;* 3064fa7 Recording Changes to the repositery&#39;&quot; We can filter the log outputs based on different information:date (with commands --since and --after), author… shell(&#39;git log --pretty=oneline --since=&quot;2020-04-06&quot;&#39;, intern = TRUE) ## [1] &quot;524314893e1eb8546a3575c8c57d2885bc1c5cec my message of commit&quot; ## [2] &quot;9b2e0b726a32fc730d25e0fce62f0427af8f819c my message of commit&quot; ## [3] &quot;3064fa7174b73658caa6fc1445c9793684d335d0 Recording Changes to the repositery&#39;&quot; ## [4] &quot;677618a2d89d9d3bdc36cb099613bbb572c2791b my message of comit&quot; ## [5] &quot;b0b9f3b473fc97e63c8ff25e4bf9a8a6901052c4 My First commit&quot; ## [6] &quot;1db3918a45c8cdc81f014921352fafc7c2a88626 My First commit&quot; ## [7] &quot;f504ff8aebc2fe30e344cc56601991fa683a0934 My First commit&quot; ## [8] &quot;57d8ad9e489b920d88f4a79faf3d0140adc4e0a9 My First commit&quot; ## [9] &quot;e5f83cf5cbd27dee4afa5e3a06108ea524e70270 My First commit&quot; ## [10] &quot;7f138ed826de2bd53795644372e509fc34ad42a3 My First commit&quot; ## [11] &quot;65d39114201785690b1046636740bc4c20fc9986 My First commit&quot; ## [12] &quot;0841ecb6a3ec373f6c2429a6859d7132cc4cff70 My First commit&quot; "],
["github.html", "Chapter 4 GitHub 4.1 Adding an existing project to GitHub 4.2 Getting changes from a remote repository", " Chapter 4 GitHub 4.1 Adding an existing project to GitHub 1- Create a new repository on GitHub. To avoid arrors, do not initialize the new repository with README, license, or gitingore files. You can add these files after your project has been pushed to GitHub 2- Open Git Bash 3- Chan the current working directory to your local project setwd(dir = &quot;D:/git_test/Git_Book/_book&quot;) 4- Initialize the local directory as a Git repository shell(&quot;git init&quot;) 5- Ad the files in your new local repositor. This stages them for the first commit shell(&quot;git add .&quot;) ## Adds the files in the local repository and stages them for commit. To unstage a file, use &#39;git reset HEAD YOUR-FILE&#39;. 6- Commit the files that you have staged in your local repository shell(&#39;git commit -m &quot;My First commit&quot;&#39;,intern = TRUE) ## Warning in system(cmd, intern = intern, wait = wait | intern, ## show.output.on.console = wait, : l&#39;exécution de la commande &#39;C: ## \\WINDOWS\\system32\\cmd.exe /c git commit -m &quot;My First commit&quot;&#39; renvoie un statut ## 1 ## [1] &quot;On branch master&quot; ## [2] &quot;Changes not staged for commit:&quot; ## [3] &quot; (use \\&quot;git add &lt;file&gt;...\\&quot; to update what will be committed)&quot; ## [4] &quot; (use \\&quot;git restore &lt;file&gt;...\\&quot; to discard changes in working directory)&quot; ## [5] &quot; (commit or discard the untracked or modified content in submodules)&quot; ## [6] &quot;\\tmodified: _book (modified content)&quot; ## [7] &quot;&quot; ## [8] &quot;no changes added to commit (use \\&quot;git add\\&quot; and/or \\&quot;git commit -a\\&quot;)&quot; ## attr(,&quot;status&quot;) ## [1] 1 # Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use &#39;git reset --soft HEAD~1&#39; and commit and add the file again. 7- At the top of your GitHub repository’s Quick setup page, copy the remote repository URL 8- In the Command prompt, add the URL for the remote repository where your local repository will be pushed # sets the new remote shell(&#39;git remote add origin https://github.com/S-AI-F/GitBook.git&#39;) ## Warning in shell(&quot;git remote add origin https://github.com/S-AI-F/GitBook.git&quot;): ## &#39;git remote add origin https://github.com/S-AI-F/GitBook.git&#39; execution failed ## with error code 128 # Verifies the new remote URL shell(&#39;git remote -v&#39;, intern = TRUE) ## [1] &quot;origin\\thttps://github.com/S-AI-F/GitBook.git (fetch)&quot; ## [2] &quot;origin\\thttps://github.com/S-AI-F/GitBook.git (push)&quot; 9 - Push the changes in your local repository to GitHub # Pushes the changes in your local repository up to the remote repository you specified as the origin shell(&#39;git push origin master&#39;) 4.2 Getting changes from a remote repository These commands are very useful when interacting with a remote repository. clone and fetch donload remote code from a repository’s remote URL to your local compter. merge is used to merge different people’s work tohether with yours, and pull is a combination of fetch and merge. 4.2.1 Cloning a repository # Clones a repository to your computer shell(&#39;git clone https://github.com/USERNAME/REPOSITORY.git&#39;) 4.2.2 Fetching changes from a remote repository Use git fetch to retrieve new work done by other people. Fetching from a repository grabs all the new remote-tracking branches and tgs without merging those changes into your own branches. # Fetches updates made to a remote repository shell(&#39;git fetch remotename&#39;) 4.2.3 Merging changes into your local branch Meging combines your local changes with changes made by others. # Merges updates made online with your local work shell(&#39;git merge remotename/branchname&#39;) 4.2.4 Pulling changes from a remote repository git pull is a convenient shortcut for completing both git fetch and git merge in the same command # Grabs online updates and merges them with your local work shell(&#39;git merge remotename branchname&#39;) Because pull performs a merge on the retrieved changes, you should ensure that your local work is committed before running the pull command. If you run into a merge conflict you cannot resolve, or if you decide to quit the merge, you can use git merge --abort to take the branch back to where it was before you pulled. "],
["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],
["references.html", "References", " References "]
]
