[
["index.html", "My Git Turorial Chapter 1 Prerequisites", " My Git Turorial Saif Shabou 2020-04-08 Chapter 1 Prerequisites This is a Git tutorial written in Markdown and compiled by bookdown package. It is based in different documentation that you can find in these websites: https://git-scm.com/book/en/v2 https://help.github.com/en/github "],
["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2020) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["git-basics.html", "Chapter 3 Git Basics 3.1 Getting a Git repositery 3.2 Recording Changes to the repositery 3.3 Viewing the commit history 3.4 Working with remotes", " Chapter 3 Git Basics 3.1 Getting a Git repositery There are two ways for obtaining a Git repository: - Transform an existing local directory without version control into a Git repositor - Clone an existing Git repositery from somewhere else 3.1.1 Initializig a Repository in an Existing Directory First, you have to go to the project directory # work directory initial_repo = &quot;D:/git_test/Git_Book/&quot; setwd(initial_repo) # Repository directory name dir_name = &quot;MyRepo&quot; new_repo = paste(initial_repo,&quot;MyRepo&quot;, sep = &quot;/&quot;) # verify if the repo file exist and remove it if it exists if(dir.exists(&quot;D:/git_test/Git_Book/MyRepo&quot;) == TRUE){ unlink(&quot;D:/git_test/Git_Book/MyRepo&quot;, recursive = TRUE) } # we create a project directory dir.create(&quot;MyRepo&quot;) ## Warning in dir.create(&quot;MyRepo&quot;): &#39;MyRepo&#39; existe déjà # Then we go to that projetc directory setwd(new_repo) shell(&quot;dir&quot;) # initialize a git repository shell(&quot;git init&quot;) This creates a new subdirectory named .git that contains all necessary repository files (a git repository skeleton). Now we can start version-conrolling files and do initial commits. setwd(new_repo) # First we have to specify our identity shell(&#39;git config --global user.name &quot;Saif Shabou&quot;&#39;) shell(&#39;git config --global user.email &quot;saif.shabou@gmail.com&quot;&#39;) print(getwd()) ## [1] &quot;D:/git_test/Git_Book/MyRepo&quot; # then we create a new file and commit this action nb = sample(1:1000, 1, replace=TRUE) filename = paste(&quot;file_&quot;,nb,&quot;.csv&quot;, sep = &quot;&quot;) file.create(filename) ## [1] TRUE cmd_add = paste(&quot;git add&quot;, filename, sep = &quot; &quot;) shell(cmd_add) shell(&#39;git commit -m &quot;adding new file&quot;&#39;, intern = TRUE) ## [1] &quot;[master (root-commit) 5d83e06] adding new file&quot; ## [2] &quot; 1 file changed, 0 insertions(+), 0 deletions(-)&quot; ## [3] &quot; create mode 100644 file_933.csv&quot; 3.1.2 Cloning an existing git project When we want to get a copy of an existing Git repositery we can use git clone shell(&quot;git clone https://github.com/S-AI-F/Remote-sensing-image-analysis MyClone&quot;) ## Warning in shell(&quot;git clone https://github.com/S-AI-F/Remote-sensing-image- ## analysis MyClone&quot;): &#39;git clone https://github.com/S-AI-F/Remote-sensing-image- ## analysis MyClone&#39; execution failed with error code 128 3.2 Recording Changes to the repositery Each file in our working directory can be in one of to possible states: tracked or untracked. Tracked files are the files known by Git. They can be: unmodified, modified, or staged. Untracked files are any files in the orking directory that are not in the staging area. When we clone a repository, all the files will be tracked and unmodified. When we are editing files, Git considers them as modified since they changed from the last commit. As we work, we stage these modified files and then we commit all those stages changes. And this cycle repeats. Git lifecycle (source:https://git-scm.com/book/en/v2) 3.2.1 Checking the Status of Files The command git status enables s to determine the status of the different tracked files. shell(&quot;git status&quot;, intern = TRUE) ## [1] &quot;On branch master&quot; ## [2] &quot;Changes not staged for commit:&quot; ## [3] &quot; (use \\&quot;git add &lt;file&gt;...\\&quot; to update what will be committed)&quot; ## [4] &quot; (use \\&quot;git restore &lt;file&gt;...\\&quot; to discard changes in working directory)&quot; ## [5] &quot;\\tmodified: .Rproj.user/CE830DEF/rmd-outputs&quot; ## [6] &quot;\\tmodified: .Rproj.user/CE830DEF/sources/prop/72E6F1F2&quot; ## [7] &quot;\\tmodified: 02-gitBasics.Rmd&quot; ## [8] &quot;\\tmodified: Git_Book.Rmd&quot; ## [9] &quot;\\tmodified: MyRepo (new commits)&quot; ## [10] &quot;\\tmodified: _book (new commits)&quot; ## [11] &quot;&quot; ## [12] &quot;no changes added to commit (use \\&quot;git add\\&quot; and/or \\&quot;git commit -a\\&quot;)&quot; We have to check the file status to know if we need to make a new commit. When the message tells:Your branch is up-to-date with 'origin/master'. nothing to commit, working directory clean, it means that none of our tracked files are modified. 3.2.2 Tracking new Files In order to track new file, we can use the command git add. To track all the existing files in the directory we use git add . In the git status results, we can see that Git recognizes the changes to be committed shell(&quot;git add .&quot;, intern = TRUE) ## character(0) We can use the command git diff to know what files we changed but not yet staged and what files we staged but not yet commited. shell(&quot;git diff&quot;, intern = TRUE) ## character(0) The command compares what is in our working directory with the staging area. The results show the changes we have made and have not yet staged. 3.2.3 Committing changes Committing changes include only files created and modified that are added using git add command. We have to check git status before committing in order to check that files to commit are already staged. shell(&#39;git commit -m &quot;my message of commit&quot;&#39;, intern = TRUE) ## [1] &quot;[master a05eb2e] my message of commit&quot; ## [2] &quot; 6 files changed, 151 insertions(+), 4 deletions(-)&quot; 3.3 Viewing the commit history When we have made several commits, we may need to look back what happened using the command git log. It lists the different commits made in the repository in reverse chronological order ann mention the commit id (SHA-1), the author (name, email), the commit date and the commit message. we can limit the number og log displayed by iusing -3 to show only the last 3 entries. shell(&quot;git log -3&quot;, intern = TRUE) ## [1] &quot;commit a05eb2ec89c2c5eddb3f90baea86f2f98e134d8b&quot; ## [2] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [3] &quot;Date: Wed Apr 8 09:24:42 2020 +0200&quot; ## [4] &quot;&quot; ## [5] &quot; my message of commit&quot; ## [6] &quot;&quot; ## [7] &quot;commit 524314893e1eb8546a3575c8c57d2885bc1c5cec&quot; ## [8] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [9] &quot;Date: Tue Apr 7 12:16:20 2020 +0200&quot; ## [10] &quot;&quot; ## [11] &quot; my message of commit&quot; ## [12] &quot;&quot; ## [13] &quot;commit 9b2e0b726a32fc730d25e0fce62f0427af8f819c&quot; ## [14] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [15] &quot;Date: Tue Apr 7 11:50:36 2020 +0200&quot; ## [16] &quot;&quot; ## [17] &quot; my message of commit&quot; There are several options to the command git log. For example, -p shows the different (the path output) introduced in each commit. shell(&quot;git log -p -1&quot;, intern = TRUE) ## [1] &quot;commit a05eb2ec89c2c5eddb3f90baea86f2f98e134d8b&quot; ## [2] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [3] &quot;Date: Wed Apr 8 09:24:42 2020 +0200&quot; ## [4] &quot;&quot; ## [5] &quot; my message of commit&quot; ## [6] &quot;&quot; ## [7] &quot;diff --git a/.Rproj.user/CE830DEF/rmd-outputs b/.Rproj.user/CE830DEF/rmd-outputs&quot; ## [8] &quot;index 402424f..50c3a18 100644&quot; ## [9] &quot;--- a/.Rproj.user/CE830DEF/rmd-outputs&quot; ## [10] &quot;+++ b/.Rproj.user/CE830DEF/rmd-outputs&quot; ## [11] &quot;@@ -3,3 +3,8 @@ D:/git_test/Git_Book/_book/index.html&quot; ## [12] &quot; D:/git_test/Git_Book/_book/index.html&quot; ## [13] &quot; D:/git_test/Git_Book/_book/index.html&quot; ## [14] &quot; D:/git_test/Git_Book/_book/index.html&quot; ## [15] &quot;+&quot; ## [16] &quot;+&quot; ## [17] &quot;+&quot; ## [18] &quot;+&quot; ## [19] &quot;+&quot; ## [20] &quot;diff --git a/.Rproj.user/CE830DEF/sources/prop/72E6F1F2 b/.Rproj.user/CE830DEF/sources/prop/72E6F1F2&quot; ## [21] &quot;index 73c5ac1..760f4ee 100644&quot; ## [22] &quot;--- a/.Rproj.user/CE830DEF/sources/prop/72E6F1F2&quot; ## [23] &quot;+++ b/.Rproj.user/CE830DEF/sources/prop/72E6F1F2&quot; ## [24] &quot;@@ -1,4 +1,4 @@&quot; ## [25] &quot; {&quot; ## [26] &quot;- \\&quot;cursorPosition\\&quot; : \\&quot;154,69\\&quot;,&quot; ## [27] &quot;- \\&quot;scrollLine\\&quot; : \\&quot;135\\&quot;&quot; ## [28] &quot;+ \\&quot;cursorPosition\\&quot; : \\&quot;224,46\\&quot;,&quot; ## [29] &quot;+ \\&quot;scrollLine\\&quot; : \\&quot;204\\&quot;&quot; ## [30] &quot; }&quot; ## [31] &quot;\\\\ No newline at end of file&quot; ## [32] &quot;diff --git a/02-gitBasics.Rmd b/02-gitBasics.Rmd&quot; ## [33] &quot;index 0eea05d..eae4f66 100644&quot; ## [34] &quot;--- a/02-gitBasics.Rmd&quot; ## [35] &quot;+++ b/02-gitBasics.Rmd&quot; ## [36] &quot;@@ -155,3 +155,74 @@ We can filter the log outputs based on different information:date (with commands&quot; ## [37] &quot; shell(&#39;git log --pretty=oneline --since=\\&quot;2020-04-06\\&quot;&#39;, intern = TRUE)&quot; ## [38] &quot; ```&quot; ## [39] &quot; &quot; ## [40] &quot;+## Working with remotes&quot; ## [41] &quot;+&quot; ## [42] &quot;+Remote repositories are versions of our project that are hosted online.&quot; ## [43] &quot;+&quot; ## [44] &quot;+### Showing remotes&quot; ## [45] &quot;+We can use the command `git remote` in order to show the URL of remote servers configured with our project.&quot; ## [46] &quot;+&quot; ## [47] &quot;+```{r}&quot; ## [48] &quot;+shell(\\&quot;git remote -v\\&quot;, intern = TRUE)&quot; ## [49] &quot;+```&quot; ## [50] &quot;+&quot; ## [51] &quot;+&quot; ## [52] &quot;+### Adding remote repositories&quot; ## [53] &quot;+&quot; ## [54] &quot;+We can add a remote Git repository and reference it with a shortname (here we will use ss)&quot; ## [55] &quot;+&quot; ## [56] &quot;+```{r}&quot; ## [57] &quot;+shell(\\&quot;git remote add ss https://github.com/S-AI-F/GitBook.git\\&quot;)&quot; ## [58] &quot;+shell(\\&quot;git remote -v\\&quot;, intern = TRUE)&quot; ## [59] &quot;+```&quot; ## [60] &quot;+&quot; ## [61] &quot;+Now we can use the ss shortname instead of the whole url. We can for example fetch the changes that are not yet in our repository.&quot; ## [62] &quot;+&quot; ## [63] &quot;+```{r}&quot; ## [64] &quot;+shell(\\&quot;git fetch ss\\&quot;, intern = TRUE)&quot; ## [65] &quot;+```&quot; ## [66] &quot;+&quot; ## [67] &quot;+### Fetching and pulling from remotes&quot; ## [68] &quot;+&quot; ## [69] &quot;+The command `fetch` fetches new work that has been pushed to the server and are not merged with our local repository. It only downloads the data to our local repository without merging it with our work and without modifying our work directory. We have to merge it manually after the `fetch`.&quot; ## [70] &quot;+&quot; ## [71] &quot;+The `git pull` makes both: fetching and merging changes in the remote branch with our current branch.&quot; ## [72] &quot;+&quot; ## [73] &quot;+### Pushing to remotes&quot; ## [74] &quot;+&quot; ## [75] &quot;+We push our work when we think that our project is at a point that we want to share it. For tat, we use the command `git push &lt;remote&gt; &lt;branch&gt;`. Cloning a remote project sets up generaly the remote name as *\\&quot;origin\\&quot;* and the local branch name as *\\&quot;master\\&quot;*. So if we want to push our `master` branch&quot; ## [76] &quot;+ to our `origin` server, we runn the command below to ush any commits we made to the server:&quot; ## [77] &quot;+ &quot; ## [78] &quot;+```{r}&quot; ## [79] &quot;+shell(\\&quot;git push origin master\\&quot;, intern = TRUE)&quot; ## [80] &quot;+```&quot; ## [81] &quot;+&quot; ## [82] &quot;+If another person working on the remote repository pushed information before between our clone and our push, we have to integrate (fetch) their work first before pushing.&quot; ## [83] &quot;+&quot; ## [84] &quot;+### Inspecting a remote&quot; ## [85] &quot;+&quot; ## [86] &quot;+We can use the command `git remote show &lt;our remote&gt;` in order to show information about our remote&quot; ## [87] &quot;+&quot; ## [88] &quot;+```{r}&quot; ## [89] &quot;+shell(\\&quot;git remote show origin\\&quot;, intern = TRUE)&quot; ## [90] &quot;+```&quot; ## [91] &quot;+&quot; ## [92] &quot;+The command shows the URL of remote repository and tells us which branch is automatically pushed to when we run `git push` and which remote branches on the server we don&#39;t have yet.&quot; ## [93] &quot;+&quot; ## [94] &quot;+### Renaming and removing remotes&quot; ## [95] &quot;+&quot; ## [96] &quot;+We can use the command `rename` to rename a remote. For example, we will change `ss` to `saif`&quot; ## [97] &quot;+&quot; ## [98] &quot;+```{r}&quot; ## [99] &quot;+shell(\\&quot;git remote\\&quot;, intern = TRUE)&quot; ## [100] &quot;+shell(\\&quot;git remote rename ss saif\\&quot;, intern = TRUE)&quot; ## [101] &quot;+shell(\\&quot;git remote\\&quot;, intern = TRUE)&quot; ## [102] &quot;+```&quot; ## [103] &quot;+&quot; ## [104] &quot;+We can use the `remove` command to remove a remote&quot; ## [105] &quot;+&quot; ## [106] &quot;+```{r}&quot; ## [107] &quot;+shell(\\&quot;git remote remove saif\\&quot;, intern = TRUE)&quot; ## [108] &quot;+shell(\\&quot;git remote\\&quot;, intern = TRUE)&quot; ## [109] &quot;+```&quot; ## [110] &quot;+&quot; ## [111] &quot;diff --git a/Git_Book.Rmd b/Git_Book.Rmd&quot; ## [112] &quot;index 338f68f..e2bb021 100644&quot; ## [113] &quot;--- a/Git_Book.Rmd&quot; ## [114] &quot;+++ b/Git_Book.Rmd&quot; ## [115] &quot;@@ -205,6 +205,77 @@ We can filter the log outputs based on different information:date (with commands&quot; ## [116] &quot; shell(&#39;git log --pretty=oneline --since=\\&quot;2020-04-06\\&quot;&#39;, intern = TRUE)&quot; ## [117] &quot; ```&quot; ## [118] &quot; &quot; ## [119] &quot;+## Working with remotes&quot; ## [120] &quot;+&quot; ## [121] &quot;+Remote repositories are versions of our project that are hosted online.&quot; ## [122] &quot;+&quot; ## [123] &quot;+### Showing remotes&quot; ## [124] &quot;+We can use the command `git remote` in order to show the URL of remote servers configured with our project.&quot; ## [125] &quot;+&quot; ## [126] &quot;+```{r}&quot; ## [127] &quot;+shell(\\&quot;git remote -v\\&quot;, intern = TRUE)&quot; ## [128] &quot;+```&quot; ## [129] &quot;+&quot; ## [130] &quot;+&quot; ## [131] &quot;+### Adding remote repositories&quot; ## [132] &quot;+&quot; ## [133] &quot;+We can add a remote Git repository and reference it with a shortname (here we will use ss)&quot; ## [134] &quot;+&quot; ## [135] &quot;+```{r}&quot; ## [136] &quot;+shell(\\&quot;git remote add ss https://github.com/S-AI-F/GitBook.git\\&quot;)&quot; ## [137] &quot;+shell(\\&quot;git remote -v\\&quot;, intern = TRUE)&quot; ## [138] &quot;+```&quot; ## [139] &quot;+&quot; ## [140] &quot;+Now we can use the ss shortname instead of the whole url. We can for example fetch the changes that are not yet in our repository.&quot; ## [141] &quot;+&quot; ## [142] &quot;+```{r}&quot; ## [143] &quot;+shell(\\&quot;git fetch ss\\&quot;, intern = TRUE)&quot; ## [144] &quot;+```&quot; ## [145] &quot;+&quot; ## [146] &quot;+### Fetching and pulling from remotes&quot; ## [147] &quot;+&quot; ## [148] &quot;+The command `fetch` fetches new work that has been pushed to the server and are not merged with our local repository. It only downloads the data to our local repository without merging it with our work and without modifying our work directory. We have to merge it manually after the `fetch`.&quot; ## [149] &quot;+&quot; ## [150] &quot;+The `git pull` makes both: fetching and merging changes in the remote branch with our current branch.&quot; ## [151] &quot;+&quot; ## [152] &quot;+### Pushing to remotes&quot; ## [153] &quot;+&quot; ## [154] &quot;+We push our work when we think that our project is at a point that we want to share it. For tat, we use the command `git push &lt;remote&gt; &lt;branch&gt;`. Cloning a remote project sets up generaly the remote name as *\\&quot;origin\\&quot;* and the local branch name as *\\&quot;master\\&quot;*. So if we want to push our `master` branch&quot; ## [155] &quot;+ to our `origin` server, we runn the command below to ush any commits we made to the server:&quot; ## [156] &quot;+ &quot; ## [157] &quot;+```{r}&quot; ## [158] &quot;+shell(\\&quot;git push origin master\\&quot;, intern = TRUE)&quot; ## [159] &quot;+```&quot; ## [160] &quot;+&quot; ## [161] &quot;+If another person working on the remote repository pushed information before between our clone and our push, we have to integrate (fetch) their work first before pushing.&quot; ## [162] &quot;+&quot; ## [163] &quot;+### Inspecting a remote&quot; ## [164] &quot;+&quot; ## [165] &quot;+We can use the command `git remote show &lt;our remote&gt;` in order to show information about our remote&quot; ## [166] &quot;+&quot; ## [167] &quot;+```{r}&quot; ## [168] &quot;+shell(\\&quot;git remote show origin\\&quot;, intern = TRUE)&quot; ## [169] &quot;+```&quot; ## [170] &quot;+&quot; ## [171] &quot;+The command shows the URL of remote repository and tells us which branch is automatically pushed to when we run `git push` and which remote branches on the server we don&#39;t have yet.&quot; ## [172] &quot;+&quot; ## [173] &quot;+### Renaming and removing remotes&quot; ## [174] &quot;+&quot; ## [175] &quot;+We can use the command `rename` to rename a remote. For example, we will change `ss` to `saif`&quot; ## [176] &quot;+&quot; ## [177] &quot;+```{r}&quot; ## [178] &quot;+shell(\\&quot;git remote\\&quot;, intern = TRUE)&quot; ## [179] &quot;+shell(\\&quot;git remote rename ss saif\\&quot;, intern = TRUE)&quot; ## [180] &quot;+shell(\\&quot;git remote\\&quot;, intern = TRUE)&quot; ## [181] &quot;+```&quot; ## [182] &quot;+&quot; ## [183] &quot;+We can use the `remove` command to remove a remote&quot; ## [184] &quot;+&quot; ## [185] &quot;+```{r}&quot; ## [186] &quot;+shell(\\&quot;git remote remove saif\\&quot;, intern = TRUE)&quot; ## [187] &quot;+shell(\\&quot;git remote\\&quot;, intern = TRUE)&quot; ## [188] &quot;+```&quot; ## [189] &quot;+&quot; ## [190] &quot; &quot; ## [191] &quot; &lt;!--chapter:end:02-gitBasics.Rmd--&gt;&quot; ## [192] &quot; &quot; ## [193] &quot;diff --git a/MyRepo b/MyRepo&quot; ## [194] &quot;index 06b2c25..5d83e06 160000&quot; ## [195] &quot;--- a/MyRepo&quot; ## [196] &quot;+++ b/MyRepo&quot; ## [197] &quot;@@ -1 +1 @@&quot; ## [198] &quot;-Subproject commit 06b2c25b5118362dbc2b4b68c748e6cdbf990fd9&quot; ## [199] &quot;+Subproject commit 5d83e06f326915d3b16f10138cec39758bc74eb5&quot; ## [200] &quot;diff --git a/_book b/_book&quot; ## [201] &quot;index 161e688..9330b30 160000&quot; ## [202] &quot;--- a/_book&quot; ## [203] &quot;+++ b/_book&quot; ## [204] &quot;@@ -1 +1 @@&quot; ## [205] &quot;-Subproject commit 161e6882b076857432ab97d290c8f556250001d8&quot; ## [206] &quot;+Subproject commit 9330b3079e9433238cae6b53b7fcec9d64adfc17&quot; We can use the option --stat to show some statstics fr each commit: how many files were changed, hw many lines ere addred and removed… It prints a summary of the inormation at the end. shell(&quot;git log --stat -3&quot;, intern = TRUE) ## [1] &quot;commit a05eb2ec89c2c5eddb3f90baea86f2f98e134d8b&quot; ## [2] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [3] &quot;Date: Wed Apr 8 09:24:42 2020 +0200&quot; ## [4] &quot;&quot; ## [5] &quot; my message of commit&quot; ## [6] &quot;&quot; ## [7] &quot; .Rproj.user/CE830DEF/rmd-outputs | 5 +++&quot; ## [8] &quot; .Rproj.user/CE830DEF/sources/prop/72E6F1F2 | 4 +-&quot; ## [9] &quot; 02-gitBasics.Rmd | 71 ++++++++++++++++++++++++++++++&quot; ## [10] &quot; Git_Book.Rmd | 71 ++++++++++++++++++++++++++++++&quot; ## [11] &quot; MyRepo | 2 +-&quot; ## [12] &quot; _book | 2 +-&quot; ## [13] &quot; 6 files changed, 151 insertions(+), 4 deletions(-)&quot; ## [14] &quot;&quot; ## [15] &quot;commit 524314893e1eb8546a3575c8c57d2885bc1c5cec&quot; ## [16] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [17] &quot;Date: Tue Apr 7 12:16:20 2020 +0200&quot; ## [18] &quot;&quot; ## [19] &quot; my message of commit&quot; ## [20] &quot;&quot; ## [21] &quot; .Rproj.user/CE830DEF/sources/prop/72E6F1F2 | 4 ++--&quot; ## [22] &quot; 02-gitBasics.Rmd | 34 +++++++++++++++++++++++++++++-&quot; ## [23] &quot; Git_Book.Rmd | 34 +++++++++++++++++++++++++++++-&quot; ## [24] &quot; MyRepo | 2 +-&quot; ## [25] &quot; 4 files changed, 69 insertions(+), 5 deletions(-)&quot; ## [26] &quot;&quot; ## [27] &quot;commit 9b2e0b726a32fc730d25e0fce62f0427af8f819c&quot; ## [28] &quot;Author: Saif Shabou &lt;saif.shabou@gmail.com&gt;&quot; ## [29] &quot;Date: Tue Apr 7 11:50:36 2020 +0200&quot; ## [30] &quot;&quot; ## [31] &quot; my message of commit&quot; ## [32] &quot;&quot; ## [33] &quot; .Rproj.user/CE830DEF/sources/prop/72E6F1F2 | 4 +-&quot; ## [34] &quot; 02-gitBasics.Rmd | 12 +&quot; ## [35] &quot; Git_Book.Rmd | 294 +++++++++++++++++++++&quot; ## [36] &quot; .../figure-html/nice-fig-1.png | Bin&quot; ## [37] &quot; .../figure-latex/nice-fig-1.pdf | Bin&quot; ## [38] &quot; MyRepo | 2 +-&quot; ## [39] &quot; _book | 2 +-&quot; ## [40] &quot; 7 files changed, 310 insertions(+), 4 deletions(-)&quot; The option --pretty changes the log output formats by specifying a customized format: oneline,short, full… shell(&quot;git log --pretty=oneline -3&quot;, intern = TRUE) ## [1] &quot;a05eb2ec89c2c5eddb3f90baea86f2f98e134d8b my message of commit&quot; ## [2] &quot;524314893e1eb8546a3575c8c57d2885bc1c5cec my message of commit&quot; ## [3] &quot;9b2e0b726a32fc730d25e0fce62f0427af8f819c my message of commit&quot; One interesting option in format consists on specifying our own log output. This espicially useful when our outputs are used and parsed. We can fin here the list of options we can use. shell(&#39;git log --pretty=format:&quot;%h - %an, %ar : %s&quot; -3&#39;, intern = TRUE) ## [1] &quot;a05eb2e - Saif Shabou, 1 second ago : my message of commit&quot; ## [2] &quot;5243148 - Saif Shabou, 21 hours ago : my message of commit&quot; ## [3] &quot;9b2e0b7 - Saif Shabou, 22 hours ago : my message of commit&quot; The graph option allows us to add a nice ASCII graph showing the branch and merge history. shell(&#39;git log --pretty=format:&quot;%h %s&quot; --graph -3&#39;, intern = TRUE) ## [1] &quot;* a05eb2e my message of commit&quot; &quot;* 5243148 my message of commit&quot; ## [3] &quot;* 9b2e0b7 my message of commit&quot; We can filter the log outputs based on different information:date (with commands --since and --after), author… shell(&#39;git log --pretty=oneline --since=&quot;2020-04-06&quot;&#39;, intern = TRUE) ## [1] &quot;a05eb2ec89c2c5eddb3f90baea86f2f98e134d8b my message of commit&quot; ## [2] &quot;524314893e1eb8546a3575c8c57d2885bc1c5cec my message of commit&quot; ## [3] &quot;9b2e0b726a32fc730d25e0fce62f0427af8f819c my message of commit&quot; ## [4] &quot;3064fa7174b73658caa6fc1445c9793684d335d0 Recording Changes to the repositery&#39;&quot; ## [5] &quot;677618a2d89d9d3bdc36cb099613bbb572c2791b my message of comit&quot; ## [6] &quot;b0b9f3b473fc97e63c8ff25e4bf9a8a6901052c4 My First commit&quot; ## [7] &quot;1db3918a45c8cdc81f014921352fafc7c2a88626 My First commit&quot; ## [8] &quot;f504ff8aebc2fe30e344cc56601991fa683a0934 My First commit&quot; ## [9] &quot;57d8ad9e489b920d88f4a79faf3d0140adc4e0a9 My First commit&quot; ## [10] &quot;e5f83cf5cbd27dee4afa5e3a06108ea524e70270 My First commit&quot; ## [11] &quot;7f138ed826de2bd53795644372e509fc34ad42a3 My First commit&quot; ## [12] &quot;65d39114201785690b1046636740bc4c20fc9986 My First commit&quot; ## [13] &quot;0841ecb6a3ec373f6c2429a6859d7132cc4cff70 My First commit&quot; 3.4 Working with remotes Remote repositories are versions of our project that are hosted online. 3.4.1 Showing remotes We can use the command git remote in order to show the URL of remote servers configured with our project. shell(&quot;git remote -v&quot;, intern = TRUE) ## [1] &quot;origin\\thttps://github.com/S-AI-F/GitBook.git (fetch)&quot; ## [2] &quot;origin\\thttps://github.com/S-AI-F/GitBook.git (push)&quot; ## [3] &quot;ss\\thttps://github.com/S-AI-F/GitBook.git (fetch)&quot; ## [4] &quot;ss\\thttps://github.com/S-AI-F/GitBook.git (push)&quot; 3.4.2 Adding remote repositories We can add a remote Git repository and reference it with a shortname (here we will use ss) shell(&quot;git remote add ss https://github.com/S-AI-F/GitBook.git&quot;) ## Warning in shell(&quot;git remote add ss https://github.com/S-AI-F/GitBook.git&quot;): ## &#39;git remote add ss https://github.com/S-AI-F/GitBook.git&#39; execution failed with ## error code 128 shell(&quot;git remote -v&quot;, intern = TRUE) ## [1] &quot;origin\\thttps://github.com/S-AI-F/GitBook.git (fetch)&quot; ## [2] &quot;origin\\thttps://github.com/S-AI-F/GitBook.git (push)&quot; ## [3] &quot;ss\\thttps://github.com/S-AI-F/GitBook.git (fetch)&quot; ## [4] &quot;ss\\thttps://github.com/S-AI-F/GitBook.git (push)&quot; Now we can use the ss shortname instead of the whole url. We can for example fetch the changes that are not yet in our repository. shell(&quot;git fetch ss&quot;, intern = TRUE) ## character(0) 3.4.3 Fetching and pulling from remotes The command fetch fetches new work that has been pushed to the server and are not merged with our local repository. It only downloads the data to our local repository without merging it with our work and without modifying our work directory. We have to merge it manually after the fetch. The git pull makes both: fetching and merging changes in the remote branch with our current branch. 3.4.4 Pushing to remotes We push our work when we think that our project is at a point that we want to share it. For tat, we use the command git push &lt;remote&gt; &lt;branch&gt;. Cloning a remote project sets up generaly the remote name as “origin” and the local branch name as “master”. So if we want to push our master branch to our origin server, we runn the command below to ush any commits we made to the server: shell(&quot;git push origin master&quot;, intern = TRUE) ## Warning in system(cmd, intern = intern, wait = wait | intern, ## show.output.on.console = wait, : l&#39;exécution de la commande &#39;C: ## \\WINDOWS\\system32\\cmd.exe /c git push origin master&#39; renvoie un statut 1 ## character(0) ## attr(,&quot;status&quot;) ## [1] 1 If another person working on the remote repository pushed information before between our clone and our push, we have to integrate (fetch) their work first before pushing. 3.4.5 Inspecting a remote We can use the command git remote show &lt;our remote&gt; in order to show information about our remote shell(&quot;git remote show origin&quot;, intern = TRUE) ## [1] &quot;* remote origin&quot; ## [2] &quot; Fetch URL: https://github.com/S-AI-F/GitBook.git&quot; ## [3] &quot; Push URL: https://github.com/S-AI-F/GitBook.git&quot; ## [4] &quot; HEAD branch: master&quot; ## [5] &quot; Remote branch:&quot; ## [6] &quot; master new (next fetch will store in remotes/origin)&quot; ## [7] &quot; Local ref configured for &#39;git push&#39;:&quot; ## [8] &quot; master pushes to master (local out of date)&quot; The command shows the URL of remote repository and tells us which branch is automatically pushed to when we run git push and which remote branches on the server we don’t have yet. 3.4.6 Renaming and removing remotes We can use the command rename to rename a remote. For example, we will change ss to saif shell(&quot;git remote&quot;, intern = TRUE) ## [1] &quot;origin&quot; &quot;ss&quot; shell(&quot;git remote rename ss saif&quot;, intern = TRUE) ## character(0) shell(&quot;git remote&quot;, intern = TRUE) ## [1] &quot;origin&quot; &quot;saif&quot; We can use the remove command to remove a remote shell(&quot;git remote remove saif&quot;, intern = TRUE) ## character(0) shell(&quot;git remote&quot;, intern = TRUE) ## [1] &quot;origin&quot; "],
["github.html", "Chapter 4 GitHub 4.1 Adding an existing project to GitHub 4.2 Getting changes from a remote repository", " Chapter 4 GitHub 4.1 Adding an existing project to GitHub 1- Create a new repository on GitHub. To avoid arrors, do not initialize the new repository with README, license, or gitingore files. You can add these files after your project has been pushed to GitHub 2- Open Git Bash 3- Chan the current working directory to your local project setwd(dir = &quot;D:/git_test/Git_Book/_book&quot;) 4- Initialize the local directory as a Git repository shell(&quot;git init&quot;) 5- Ad the files in your new local repositor. This stages them for the first commit shell(&quot;git add .&quot;) ## Adds the files in the local repository and stages them for commit. To unstage a file, use &#39;git reset HEAD YOUR-FILE&#39;. 6- Commit the files that you have staged in your local repository shell(&#39;git commit -m &quot;My First commit&quot;&#39;,intern = TRUE) ## Warning in system(cmd, intern = intern, wait = wait | intern, ## show.output.on.console = wait, : l&#39;exécution de la commande &#39;C: ## \\WINDOWS\\system32\\cmd.exe /c git commit -m &quot;My First commit&quot;&#39; renvoie un statut ## 1 ## [1] &quot;On branch master&quot; ## [2] &quot;nothing to commit, working tree clean&quot; ## attr(,&quot;status&quot;) ## [1] 1 # Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use &#39;git reset --soft HEAD~1&#39; and commit and add the file again. 7- At the top of your GitHub repository’s Quick setup page, copy the remote repository URL 8- In the Command prompt, add the URL for the remote repository where your local repository will be pushed # sets the new remote shell(&#39;git remote add origin https://github.com/S-AI-F/GitBook.git&#39;) ## Warning in shell(&quot;git remote add origin https://github.com/S-AI-F/GitBook.git&quot;): ## &#39;git remote add origin https://github.com/S-AI-F/GitBook.git&#39; execution failed ## with error code 128 # Verifies the new remote URL shell(&#39;git remote -v&#39;, intern = TRUE) ## [1] &quot;origin\\thttps://github.com/S-AI-F/GitBook.git (fetch)&quot; ## [2] &quot;origin\\thttps://github.com/S-AI-F/GitBook.git (push)&quot; 9 - Push the changes in your local repository to GitHub # Pushes the changes in your local repository up to the remote repository you specified as the origin shell(&#39;git push origin master&#39;) 4.2 Getting changes from a remote repository These commands are very useful when interacting with a remote repository. clone and fetch donload remote code from a repository’s remote URL to your local compter. merge is used to merge different people’s work tohether with yours, and pull is a combination of fetch and merge. 4.2.1 Cloning a repository # Clones a repository to your computer shell(&#39;git clone https://github.com/USERNAME/REPOSITORY.git&#39;) 4.2.2 Fetching changes from a remote repository Use git fetch to retrieve new work done by other people. Fetching from a repository grabs all the new remote-tracking branches and tgs without merging those changes into your own branches. # Fetches updates made to a remote repository shell(&#39;git fetch remotename&#39;) 4.2.3 Merging changes into your local branch Meging combines your local changes with changes made by others. # Merges updates made online with your local work shell(&#39;git merge remotename/branchname&#39;) 4.2.4 Pulling changes from a remote repository git pull is a convenient shortcut for completing both git fetch and git merge in the same command # Grabs online updates and merges them with your local work shell(&#39;git merge remotename branchname&#39;) Because pull performs a merge on the retrieved changes, you should ensure that your local work is committed before running the pull command. If you run into a merge conflict you cannot resolve, or if you decide to quit the merge, you can use git merge --abort to take the branch back to where it was before you pulled. "],
["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],
["references.html", "References", " References "]
]
